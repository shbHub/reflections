When you initialise a repository the hidden file .git is 
created. This file looks after all the commit information
relating to the repository.

The staging area allows you to only add the files that make
up a logical change even though you may have made changes to
more than one file. It allows you to make full use of the 
version control system by commiting in logical chunks.

When adding files to the staging area you can use diff to
compare the changes between versions in the working directory
and the staging area and changes between the staging area and
the repository so you can make sure that you only commit the
files that are appropriate to each logical change.

If you would like to add a new experimental feature or make a 
chnage that affects the whole app such as a change in language
but don't want to rewrite the whole app you can use branches.
Create a new branch, make the change, once it works merge back
into the master at a later date.

Diagrams can help visualise the branches in your repository
and keep track of which commits can be reached on each branch.

By merging two branches we have all the changes from both 
branches now in the master branch. The commits on the log 
become interleaved by the date and time they were committed.
This makes the diffing between versions difficult as two 
adjacent commits in the log could be from different branches, 
so to see the diffs between a commit and its parent, use the
show command.

Automatic merging is a quick and easy way to recombine git 
branches. When there is a merge conflict, the dispute has to
be settled manually, regardless of how simple the conflict.
This is much more reliable way of doing it as if git tried to
merge some things you could end up with non sensicle code.